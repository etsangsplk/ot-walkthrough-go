// Code generated by protoc-gen-go.
// source: kitchen.proto
// DO NOT EDIT!

/*
Package dronutz is a generated protocol buffer package.

It is generated from these files:
	kitchen.proto

It has these top-level messages:
	Empty
	Donuts
	Donut
*/
package dronutz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Donuts struct {
	Donuts []*Donut `protobuf:"bytes,1,rep,name=donuts" json:"donuts,omitempty"`
}

func (m *Donuts) Reset()                    { *m = Donuts{} }
func (m *Donuts) String() string            { return proto.CompactTextString(m) }
func (*Donuts) ProtoMessage()               {}
func (*Donuts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Donuts) GetDonuts() []*Donut {
	if m != nil {
		return m.Donuts
	}
	return nil
}

type Donut struct {
	DonutId string `protobuf:"bytes,1,opt,name=donut_id,json=donutId" json:"donut_id,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Flavor  string `protobuf:"bytes,3,opt,name=flavor" json:"flavor,omitempty"`
	Status  string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Donut) Reset()                    { *m = Donut{} }
func (m *Donut) String() string            { return proto.CompactTextString(m) }
func (*Donut) ProtoMessage()               {}
func (*Donut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Donut) GetDonutId() string {
	if m != nil {
		return m.DonutId
	}
	return ""
}

func (m *Donut) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Donut) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *Donut) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "dronutz.Empty")
	proto.RegisterType((*Donuts)(nil), "dronutz.Donuts")
	proto.RegisterType((*Donut)(nil), "dronutz.Donut")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Kitchen service

type KitchenClient interface {
	Add(ctx context.Context, in *Donuts, opts ...grpc.CallOption) (*Empty, error)
	Check(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Donuts, error)
	Remove(ctx context.Context, in *Donuts, opts ...grpc.CallOption) (*Empty, error)
}

type kitchenClient struct {
	cc *grpc.ClientConn
}

func NewKitchenClient(cc *grpc.ClientConn) KitchenClient {
	return &kitchenClient{cc}
}

func (c *kitchenClient) Add(ctx context.Context, in *Donuts, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/dronutz.Kitchen/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Check(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Donuts, error) {
	out := new(Donuts)
	err := grpc.Invoke(ctx, "/dronutz.Kitchen/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Remove(ctx context.Context, in *Donuts, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/dronutz.Kitchen/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kitchen service

type KitchenServer interface {
	Add(context.Context, *Donuts) (*Empty, error)
	Check(context.Context, *Empty) (*Donuts, error)
	Remove(context.Context, *Donuts) (*Empty, error)
}

func RegisterKitchenServer(s *grpc.Server, srv KitchenServer) {
	s.RegisterService(&_Kitchen_serviceDesc, srv)
}

func _Kitchen_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Donuts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dronutz.Kitchen/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Add(ctx, req.(*Donuts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dronutz.Kitchen/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Check(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Donuts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dronutz.Kitchen/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Remove(ctx, req.(*Donuts))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kitchen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dronutz.Kitchen",
	HandlerType: (*KitchenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Kitchen_Add_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Kitchen_Check_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Kitchen_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen.proto",
}

func init() { proto.RegisterFile("kitchen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xce, 0x2c, 0x49,
	0xce, 0x48, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x29, 0xca, 0xcf, 0x2b,
	0x2d, 0xa9, 0x52, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0x32, 0xe0, 0x62, 0x73,
	0x01, 0x09, 0x15, 0x0b, 0xa9, 0x71, 0xb1, 0xa5, 0x80, 0x59, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc,
	0x46, 0x7c, 0x7a, 0x50, 0xc5, 0x7a, 0x60, 0x05, 0x41, 0x50, 0x59, 0xa5, 0x5c, 0x2e, 0x56, 0xb0,
	0x80, 0x90, 0x24, 0x17, 0x07, 0x58, 0x28, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33,
	0x88, 0x1d, 0xcc, 0xf7, 0x4c, 0x01, 0x49, 0xe5, 0x17, 0xa5, 0xa4, 0x16, 0x81, 0xa4, 0x98, 0x20,
	0x52, 0x60, 0xbe, 0x67, 0x8a, 0x90, 0x18, 0x17, 0x5b, 0x5a, 0x4e, 0x62, 0x59, 0x7e, 0x91, 0x04,
	0x33, 0x58, 0x02, 0xca, 0x03, 0x89, 0x17, 0x97, 0x24, 0x96, 0x94, 0x16, 0x4b, 0xb0, 0x40, 0xc4,
	0x21, 0x3c, 0xa3, 0x1e, 0x46, 0x2e, 0x76, 0x6f, 0x88, 0x27, 0x84, 0x34, 0xb8, 0x98, 0x1d, 0x53,
	0x52, 0x84, 0xf8, 0x51, 0x5d, 0x56, 0x2c, 0x85, 0x70, 0x2a, 0xc4, 0x53, 0x0c, 0x42, 0x5a, 0x5c,
	0xac, 0xce, 0x19, 0xa9, 0xc9, 0xd9, 0x42, 0x68, 0x52, 0x52, 0xe8, 0x7a, 0x95, 0x18, 0x84, 0xb4,
	0xb9, 0xd8, 0x82, 0x52, 0x73, 0xf3, 0xcb, 0x52, 0x89, 0x30, 0x38, 0x89, 0x0d, 0x1c, 0x90, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x70, 0x2c, 0x82, 0x59, 0x01, 0x00, 0x00,
}
